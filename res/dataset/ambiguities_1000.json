{
    "content": [
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block traffic('streaming'), traffic('voip') start hour('11:30') end hour('17:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') allow service('PC Telephone'), service('listserver') start hour('09:40') end hour('15:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '30', 'mbps') start hour('14:10') end hour('17:20')",
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('min', '50', 'mbps') start hour('06:20') end hour('11:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.59')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset quota('download', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') unset quota('any', '2', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('any', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('download', '5', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') block traffic('streaming'), traffic('H323 video conferencing')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') block service('PC Telephone') traffic('email')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block service('youtube') traffic('social media') start hour('10:00') end hour('15:30')",
            "sentence": "define intent stnIntent: for group('guests') allow service('NETBIOS'), service('MSN chat') start hour('11:00') end hour('18:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.71') allow service('Net2Phone') protocol('dns')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') block service('Everquest'), service('Sorenson Videophone 200')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('network border system'), middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('dpi'), middlebox('firewall'), middlebox('traffics monitor') start hour('10:40') end hour('17:40')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('students') add middlebox('traffics monitor'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('min', '30', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('min', '80', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') allow protocol('scp'), protocol('snmp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') add middlebox('ids'), middlebox('overuse notification'), middlebox('dpi')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.91') set bandwidth('max', '30', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '40', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set quota('download', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') block traffic('voip') protocol('secure IMAP')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') allow service('email'), service('AIM chat')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('upload', '1', 'gb/wk') start hour('17:30') end hour('18:30')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set quota('any', '3', 'gb/wk') start hour('02:20') end hour('09:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block protocol('https'), protocol('ftp')",
            "sentence": "define intent stnIntent: for group('guests') allow service('CounterStrike') traffic('file sharing')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') allow service('Sorenson Videophone 200'), service('vimeo')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('any', '4', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('residence hall') set quota('upload', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('any', '1', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') unset bandwidth('max', '90', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') set quota('upload', '4', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block service('file transfer') protocol('icmp')",
            "sentence": "define intent stnIntent: for group('guests') allow service('netflix') protocol('scp')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.60') allow service('MSN audio') traffic('email')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set bandwidth('min', '50', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') set bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') set bandwidth('max', '90', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guest networks') allow traffic('streaming'), traffic('file sharing')",
            "sentence": "define intent stnIntent: for group('guests') allow service('MSN audio') traffic('voip')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.90') remove middlebox('ids')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') add middlebox('ids'), middlebox('network border system'), middlebox('traffics monitor')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guest networks') block service('email') protocol('icmp')",
            "sentence": "define intent stnIntent: for group('guests') allow service('file transfer') traffic('streaming')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.56') set quota('upload', '4', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') set quota('any', '5', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('hall') set bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '1', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') block traffic('gaming') protocol('secure IMAP') start hour('12:30') end hour('15:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') allow service('email') protocol('dns') start hour('08:00') end hour('19:40')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') remove middlebox('traffics monitor'), middlebox('network border system')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '70', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.83') set bandwidth('min', '40', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set quota('upload', '5', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') block service('amazon prime video') traffic('voip')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') allow service('file transfer') traffic('voip')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') add middlebox('network border system'), middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('ids')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set bandwidth('min', '30', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('download', '1', 'gb/wk') start hour('14:10') end hour('15:00')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') set quota('any', '6', 'gb/wk') start hour('02:30') end hour('11:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('any', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('download', '4', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('hall') set bandwidth('max', '90', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '5', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest networks') set quota('upload', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('upload', '5', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('unit firewall'), middlebox('ips'), middlebox('load balancer') start hour('14:10') end hour('17:00')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('unit firewall') start hour('04:00') end hour('09:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('upload', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('any', '4', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('network border system'), middlebox('dpi'), middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load balancer'), middlebox('ips'), middlebox('overuse notification')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('load balancer'), middlebox('ips')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') unset quota('any', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') unset bandwidth('min', '90', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('any', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('any', '2', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('any', '8', 'gb/wk') start hour('16:00') end hour('18:40')",
            "sentence": "define intent stnIntent: for group('students') set quota('any', '1', 'gb/wk') start hour('03:30') end hour('14:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.81') block service('NETBIOS') protocol('http')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') allow service('email') traffic('any')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '90', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') set quota('any', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.77') set bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set bandwidth('max', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('dorms') allow traffic('streaming'), traffic('email')",
            "sentence": "define intent stnIntent: for group('students') set quota('any', '1', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '40', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '50', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') add middlebox('load balancer')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') remove middlebox('copyright monitoring')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('dpi'), middlebox('ips'), middlebox('copyright monitoring')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guest') allow service('vimeo') protocol('snmp')",
            "sentence": "define intent stnIntent: for group('guests') block service('stremio'), service('amazon prime video')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block protocol('http'), protocol('icmp') start hour('10:10') end hour('18:00')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('Sony Playstation 2') traffic('voip') start hour('09:00') end hour('16:20')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') unset quota('download', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') unset quota('download', '5', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block traffic('email') protocol('scp')",
            "sentence": "define intent stnIntent: for group('dorms') allow traffic('gaming'), traffic('any')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('overuse notification')",
            "sentence": "define intent stnIntent: for group('guests') remove middlebox('firewall'), middlebox('ips')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '70', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('traffics monitor'), middlebox('parental control'), middlebox('ips')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') add middlebox('overuse notification'), middlebox('network border system')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('guests') add middlebox('parental control'), middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '80', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.79') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set bandwidth('min', '10', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('download', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('download', '1', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set bandwidth('min', '90', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') unset bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') set quota('any', '1', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('copyright monitoring'), middlebox('ips'), middlebox('traffics monitor') start hour('08:40') end hour('19:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('load balancer'), middlebox('ips'), middlebox('unit firewall') start hour('09:30') end hour('19:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('upload', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '20', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set bandwidth('max', '40', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') set bandwidth('max', '70', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('bookman') block traffic('social media') protocol('tcp')",
            "sentence": "define intent stnIntent: for group('students') block traffic('gaming') protocol('POP3')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') remove middlebox('unit firewall'), middlebox('ips')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ips'), middlebox('ids') start hour('08:40') end hour('18:20')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('network border system')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('overuse notification'), middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.60') remove middlebox('parental control'), middlebox('network border system'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') add middlebox('unit firewall'), middlebox('ips')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('ips'), middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: for group('students') remove middlebox('unit firewall')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.65')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('overuse notification'), middlebox('firewall'), middlebox('parental control')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') remove middlebox('traffics monitor'), middlebox('network border system')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') remove middlebox('ips')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') add middlebox('ips'), middlebox('copyright monitoring')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') start hour('17:30') end hour('18:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') remove middlebox('network border system') start hour('04:40') end hour('14:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('overuse notification'), middlebox('network border system')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('ids'), middlebox('firewall'), middlebox('network border system')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('download', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') set bandwidth('max', '90', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest networks') set bandwidth('min', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '20', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('guests') allow service('bittorrent'), service('file transfer')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('min', '70', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('residence hall') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '60', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.38') set quota('upload', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('upload', '9', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.56') set quota('any', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') set quota('upload', '5', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') block protocol('ftp'), protocol('https') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') block service('PC Telephone') traffic('social media') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('any', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '6', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('unit firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('dpi'), middlebox('traffics monitor'), middlebox('copyright monitoring')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') block service('irc') traffic('social media')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') allow service('file transfer') traffic('social media')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') add middlebox('unit firewall'), middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '60', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set quota('any', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('download', '3', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') block protocol('https'), protocol('IMAP') start hour('15:30') end hour('16:10')",
            "sentence": "define intent stnIntent: for group('guests') allow service('irc'), service('NETBIOS') start hour('04:20') end hour('11:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('gaming') protocol('tcp') start hour('12:00') end hour('14:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') allow service('PC Telephone') traffic('peer2peer') start hour('08:10') end hour('16:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') allow traffic('peer2peer'), traffic('file sharing')",
            "sentence": "define intent stnIntent: for group('guests') block service('Sony Playstation 2') traffic('social media') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '20', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '40', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set quota('any', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '80', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') remove middlebox('load balancer'), middlebox('dpi'), middlebox('network border system')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('firewall'), middlebox('dpi'), middlebox('overuse notification')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') set quota('any', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('any', '8', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') block service('bittorrent') protocol('dns')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') allow service('email') traffic('peer2peer')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.95') add middlebox('unit firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') add middlebox('copyright monitoring')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('unit firewall'), middlebox('ips')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('unit firewall'), middlebox('dpi')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('dpi'), middlebox('ips')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('download', '7', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '90', 'mbps') start hour('10:00') end hour('19:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.67') set bandwidth('max', '50', 'mbps') start hour('11:00') end hour('14:20')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '3', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block traffic('any') protocol('POP3')",
            "sentence": "define intent stnIntent: for group('guests') allow traffic('voip'), traffic('email')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dormitory') set quota('upload', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('download', '1', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('overuse notification'), middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('load balancer'), middlebox('dpi')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('upload', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') unset bandwidth('max', '20', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.94') set quota('download', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') set quota('download', '2', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('dorms') allow service('file transfer') traffic('any')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '2', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block protocol('smtp'), protocol('tcp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') allow traffic('gaming') protocol('snmp')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') unset bandwidth('min', '20', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') unset bandwidth('max', '90', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') set bandwidth('max', '90', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') set bandwidth('max', '70', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.83') set quota('any', '4', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set quota('download', '8', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set bandwidth('max', '50', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('traffics monitor'), middlebox('unit firewall'), middlebox('ids')",
            "sentence": "define intent stnIntent: for group('guests') remove middlebox('dpi')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.93') set bandwidth('min', '40', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') set bandwidth('max', '40', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('download', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.84') set quota('any', '5', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('scholar') allow service('vimeo') protocol('secure IMAP')",
            "sentence": "define intent stnIntent: for group('students') allow service('MSN application sharing') traffic('torrent')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') block service('Net2Phone') protocol('secure IMAP') start hour('11:00') end hour('18:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') allow service('NETBIOS') traffic('social media') start hour('12:20') end hour('15:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('any', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.62') set quota('any', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') set quota('any', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '60', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') unset quota('download', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental control')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental control'), middlebox('copyright monitoring'), middlebox('dpi')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') block service('irc') add middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('email'), service('popcorn time') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('peer2peer') protocol('https')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') allow traffic('video conference') protocol('tcp')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') block traffic('streaming'), traffic('gaming') start hour('14:00') end hour('17:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') allow service('Everquest') traffic('peer2peer') start hour('02:20') end hour('11:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('min', '90', 'mbps') start hour('08:00') end hour('19:20')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guest') block traffic('video conference') protocol('sftp')",
            "sentence": "define intent stnIntent: for group('guests') allow traffic('streaming'), traffic('H323 video conferencing')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '60', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('parental control')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('overuse notification')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('visitors') set quota('any', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('download', '8', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '40', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') unset quota('download', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.49') block protocol('icmp'), protocol('nat')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') allow traffic('any') protocol('ftp')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') block service('irc') traffic('social media') add middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('guests') block service('vimeo') traffic('gaming')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '40', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '50', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '10', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') block service('MSN video') protocol('quic')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') allow service('stremio') traffic('voip')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.58') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set quota('upload', '7', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') remove middlebox('ids'), middlebox('traffics monitor'), middlebox('overuse notification')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('traffics monitor')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('download', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') unset bandwidth('max', '70', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.96') block protocol('POP3'), protocol('secure POP')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') allow traffic('social media') protocol('secure POP')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') add middlebox('copyright monitoring'), middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '1', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('network border system'), middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('network border system'), middlebox('overuse notification'), middlebox('ips')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') allow traffic('streaming') protocol('tcp') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') allow traffic('peer2peer'), traffic('H323 video conferencing') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('visitors') block service('MSN video') traffic('any')",
            "sentence": "define intent stnIntent: for group('guests') allow service('MSN video') traffic('social media')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') set quota('download', '4', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block protocol('scp'), protocol('ftp') start hour('12:20') end hour('17:30')",
            "sentence": "define intent stnIntent: for group('students') allow service('file transfer'), service('email') start hour('08:30') end hour('17:00')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.67') allow service('Sony Playstation 2') traffic('streaming')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set quota('download', '6', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('download', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set quota('any', '7', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '60', 'mbps') start hour('14:40') end hour('17:30')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '70', 'mbps') start hour('03:20') end hour('12:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block traffic('social media') protocol('tcp') start hour('08:20') end hour('19:30')",
            "sentence": "define intent stnIntent: for group('guests') allow traffic('streaming') protocol('secure POP') start hour('08:20') end hour('15:00')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set quota('download', '6', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('any', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '9', 'gb/wk') start hour('12:20') end hour('19:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') block traffic('voip') protocol('icmp') start hour('14:40') end hour('18:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') allow service('irc') traffic('any') start hour('05:00') end hour('12:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') set bandwidth('max', '20', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.93') add middlebox('load balancer'), middlebox('dpi'), middlebox('network border system')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') remove middlebox('firewall'), middlebox('parental control'), middlebox('overuse notification')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('student') set bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '40', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '60', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('any', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('download', '1', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') add middlebox('overuse notification'), middlebox('dpi'), middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('overuse notification'), middlebox('traffics monitor'), middlebox('unit firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ips'), middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('network border system'), middlebox('traffics monitor'), middlebox('dpi')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('non registered users') remove middlebox('parental control'), middlebox('ips')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('dpi')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.85') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set bandwidth('min', '50', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '10', 'mbps') start hour('15:00') end hour('16:40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') unset quota('upload', '6', 'gb/wk') start hour('03:30') end hour('13:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('download', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('any', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set quota('any', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('download', '2', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block protocol('ftp'), protocol('https')",
            "sentence": "define intent stnIntent: for group('guests') allow service('MSN audio'), service('bittorrent')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dormitory') allow protocol('tcp'), protocol('ftp')",
            "sentence": "define intent stnIntent: for group('dorms') allow traffic('torrent') protocol('scp')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '50', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set quota('any', '6', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') unset quota('download', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') unset quota('upload', '7', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('upload', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '7', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('firewall'), middlebox('network border system'), middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('residence hall') set bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '9', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('traffics monitor'), middlebox('copyright monitoring'), middlebox('network border system')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('unit firewall'), middlebox('copyright monitoring')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set quota('download', '7', 'gb/wk') start hour('14:10') end hour('18:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set quota('upload', '1', 'gb/wk') start hour('05:00') end hour('13:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest networks') remove middlebox('ips'), middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('firewall')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('upload', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') unset bandwidth('min', '40', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('network border system'), middlebox('unit firewall') start hour('11:10') end hour('18:40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') add middlebox('network border system') start hour('11:00') end hour('16:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') set bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('download', '5', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('guests') allow traffic('gaming'), traffic('social media')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') add middlebox('parental control'), middlebox('ids')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block traffic('file sharing') protocol('tcp')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('Net2Phone') traffic('any')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('download', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '70', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('pupil') set bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '60', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('visitors') set quota('download', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('upload', '5', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('traffics monitor'), middlebox('firewall'), middlebox('parental control')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental control')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') allow traffic('file sharing') protocol('nat') add middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('guests') allow traffic('email'), traffic('video conference') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') set bandwidth('max', '50', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') allow protocol('icmp'), protocol('POP3')",
            "sentence": "define intent stnIntent: for group('guests') allow protocol('smtp'), protocol('ssh')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block service('youtube') traffic('file sharing')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('popcorn time') traffic('file sharing')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') allow service('Sony Playstation 2'), service('youtube')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('ips'), middlebox('dpi')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block traffic('peer2peer') protocol('secure POP')",
            "sentence": "define intent stnIntent: for group('guests') allow traffic('peer2peer'), traffic('any')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guest') remove middlebox('parental control'), middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('load balancer'), middlebox('overuse notification')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('ids'), middlebox('network border system'), middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('unit firewall'), middlebox('network border system')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.56') block service('CounterStrike') traffic('H323 video conferencing')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') block service('listserver') traffic('video conference')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') block protocol('tcp'), protocol('http')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') allow service('instagram') traffic('torrent')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental control')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load balancer')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('copyright monitoring'), middlebox('parental control')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') add middlebox('copyright monitoring')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') set quota('any', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('any', '2', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set bandwidth('max', '80', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('non registered users') add middlebox('unit firewall'), middlebox('ids')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('ids'), middlebox('ips'), middlebox('load balancer')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('unit firewall'), middlebox('overuse notification')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('dpi'), middlebox('load balancer'), middlebox('overuse notification')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorm') block protocol('smtp'), protocol('nat')",
            "sentence": "define intent stnIntent: for group('dorms') block traffic('email') protocol('ftp')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest users') remove middlebox('ips')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('parental control'), middlebox('dpi'), middlebox('ips')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') unset bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') unset bandwidth('max', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.61') remove middlebox('unit firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') add middlebox('unit firewall'), middlebox('dpi')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('parental control')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('upload', '5', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('student residence') set bandwidth('max', '90', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '80', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('streaming'), traffic('email') start hour('15:30') end hour('17:30')",
            "sentence": "define intent stnIntent: for group('students') block service('Everquest') traffic('peer2peer') start hour('03:00') end hour('12:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.93') set quota('download', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') set quota('download', '2', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') allow traffic('torrent'), traffic('any') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.67') block traffic('peer2peer'), traffic('video conference') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('traffics monitor'), middlebox('network border system'), middlebox('ids')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorm') set bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('any', '6', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.90') block service('NETBIOS') traffic('gaming')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') allow service('Everquest'), service('Battlenet')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('bookman') allow traffic('H323 video conferencing') protocol('icmp')",
            "sentence": "define intent stnIntent: for group('students') allow service('irc'), service('Net2Phone')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('email') protocol('http')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') allow traffic('video conference') protocol('ssh')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('ips'), middlebox('copyright monitoring'), middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('overuse notification')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dormitory') block protocol('secure IMAP'), protocol('ssh')",
            "sentence": "define intent stnIntent: for group('dorms') allow traffic('file sharing') protocol('IMAP')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') remove middlebox('ids'), middlebox('parental control')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') remove middlebox('ids'), middlebox('load balancer')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('firewall'), middlebox('network border system'), middlebox('ids')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('load balancer'), middlebox('ips'), middlebox('network border system')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') allow service('MSN application sharing') protocol('secure IMAP') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') allow service('irc'), service('NETBIOS') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.67')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.94') unset bandwidth('min', '60', 'mbps') start hour('14:10') end hour('15:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set quota('download', '7', 'gb/wk') start hour('05:20') end hour('13:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('load balancer'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('unit firewall'), middlebox('traffics monitor'), middlebox('ids')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('hall') set quota('download', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '70', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') unset bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') unset bandwidth('max', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('visitors') block protocol('http'), protocol('sftp')",
            "sentence": "define intent stnIntent: for group('guests') allow service('MSN chat') protocol('nat')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dormitory') set quota('upload', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '8', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('non registered users') set quota('download', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('download', '6', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '60', 'mbps') start hour('17:40') end hour('18:30')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('min', '70', 'mbps') start hour('05:00') end hour('12:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('unit firewall'), middlebox('network border system'), middlebox('parental control')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') add middlebox('ips'), middlebox('network border system') start hour('10:20') end hour('15:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') add middlebox('ids'), middlebox('network border system')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') add middlebox('ids')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.64') remove middlebox('network border system'), middlebox('ids'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') add middlebox('ips'), middlebox('unit firewall')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.96') add middlebox('unit firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') remove middlebox('ips'), middlebox('network border system'), middlebox('dpi')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.58')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('any', '8', 'gb/wk') start hour('14:40') end hour('17:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set quota('upload', '1', 'gb/wk') start hour('04:00') end hour('10:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '50', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('upload', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '70', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') block traffic('torrent') protocol('https') start hour('11:20') end hour('14:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') allow traffic('streaming') protocol('tcp') start hour('10:40') end hour('17:20')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') unset bandwidth('min', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('upload', '2', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('copyright monitoring'), middlebox('parental control')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('parental control')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('traffics monitor'), middlebox('ips'), middlebox('overuse notification')",
            "sentence": "define intent stnIntent: for group('guests') remove middlebox('load balancer')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('any', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('upload', '7', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guest networks') block protocol('snmp'), protocol('ftp')",
            "sentence": "define intent stnIntent: for group('guests') allow traffic('gaming') protocol('http')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest users') remove middlebox('parental control'), middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('unit firewall'), middlebox('ips'), middlebox('parental control')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('scholarly person') allow traffic('file sharing') protocol('ssh')",
            "sentence": "define intent stnIntent: for group('students') block service('Sorenson Videophone 200') protocol('tcp')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('pupil') set quota('any', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('download', '2', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('student residence') block traffic('torrent'), traffic('video conference')",
            "sentence": "define intent stnIntent: for group('dorms') block service('instagram') traffic('social media')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('visitors') set quota('any', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '4', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') unset bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') unset bandwidth('min', '40', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set bandwidth('max', '50', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '60', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') unset quota('upload', '5', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('upload', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('any', '6', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('any', '5', 'gb/wk') start hour('15:20') end hour('16:00')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('any', '8', 'gb/wk') start hour('04:10') end hour('10:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.71') set bandwidth('min', '90', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') block protocol('smtp'), protocol('quic') start hour('16:10') end hour('18:10')",
            "sentence": "define intent stnIntent: for group('guests') allow traffic('streaming') protocol('https') start hour('02:00') end hour('11:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.78') add middlebox('overuse notification')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') add middlebox('network border system'), middlebox('unit firewall')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.54') allow traffic('streaming'), traffic('H323 video conferencing')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') allow traffic('torrent'), traffic('any')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') remove middlebox('network border system'), middlebox('unit firewall'), middlebox('ids')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') add middlebox('unit firewall'), middlebox('parental control'), middlebox('traffics monitor')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set quota('download', '3', 'gb/wk') start hour('15:30') end hour('18:40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.94') set bandwidth('max', '60', 'mbps') start hour('06:20') end hour('12:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('ips'), middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ips')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.69') set bandwidth('min', '60', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set quota('download', '9', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') remove middlebox('ids')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') add middlebox('dpi'), middlebox('parental control'), middlebox('ids')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') block traffic('email'), traffic('social media')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') allow service('bittorrent'), service('file transfer')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') block service('Sorenson Videophone 200') protocol('http')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.24') allow service('MSN application sharing') protocol('udp')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.57') allow protocol('secure IMAP'), protocol('snmp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') block service('Sorenson Videophone 200') protocol('IMAP')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.61') set quota('any', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') set quota('upload', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '60', 'mbps') start hour('15:10') end hour('17:30')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('min', '60', 'mbps') start hour('04:30') end hour('13:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') set bandwidth('max', '40', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '60', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('overuse notification'), middlebox('ids')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') add middlebox('parental control'), middlebox('load balancer')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.77') set bandwidth('min', '70', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set bandwidth('max', '10', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('visitors') set bandwidth('min', '70', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set quota('upload', '8', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('pupil') set quota('upload', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '8', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('upload', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') unset bandwidth('min', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('dpi'), middlebox('overuse notification'), middlebox('ids')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('traffics monitor'), middlebox('overuse notification'), middlebox('parental control')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental control'), middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: for group('students') remove middlebox('traffics monitor'), middlebox('ips')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.91') block protocol('ftp'), protocol('telnet')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') allow protocol('quic'), protocol('telnet')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guest networks') set quota('download', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('min', '40', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.93') set bandwidth('max', '30', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('students') add middlebox('parental control'), middlebox('dpi'), middlebox('network border system')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') set quota('any', '1', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('upload', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.49') set quota('upload', '4', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('residence hall') add middlebox('firewall'), middlebox('ips'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('copyright monitoring'), middlebox('overuse notification'), middlebox('dpi')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('any', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('download', '1', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorm') add middlebox('dpi'), middlebox('ids')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.94') remove middlebox('overuse notification'), middlebox('ids'), middlebox('network border system')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') add middlebox('overuse notification')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.55') unset bandwidth('max', '20', 'mbps') start hour('14:00') end hour('18:40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set quota('any', '3', 'gb/wk') start hour('06:40') end hour('11:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('traffics monitor'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('load balancer'), middlebox('dpi')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.59') block service('Net2Phone') protocol('snmp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') allow service('MSN audio') protocol('icmp')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('any', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('download', '2', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('download', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('download', '9', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') block protocol('secure IMAP'), protocol('icmp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') allow protocol('icmp'), protocol('quic')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('traffics monitor'), middlebox('copyright monitoring'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: for group('students') remove middlebox('network border system'), middlebox('traffics monitor')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block protocol('secure IMAP'), protocol('udp')",
            "sentence": "define intent stnIntent: for group('students') allow traffic('peer2peer') protocol('smtp')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') block service('NETBIOS') traffic('torrent') start hour('14:40') end hour('17:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') allow service('Sorenson Videophone 200'), service('netflix') start hour('05:00') end hour('14:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block service('file transfer') protocol('udp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') allow service('Everquest'), service('youtube')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('download', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '2', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set bandwidth('max', '70', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '80', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('bookman') block service('Net2Phone') traffic('video conference')",
            "sentence": "define intent stnIntent: for group('students') block service('youtube') traffic('voip')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') block traffic('social media') protocol('http')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') allow traffic('any') protocol('https')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '70', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '8', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') set bandwidth('max', '90', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.48') add middlebox('ips'), middlebox('unit firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('copyright monitoring')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('ips') start hour('16:00') end hour('18:00')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('load balancer'), middlebox('ips'), middlebox('ids') start hour('03:10') end hour('11:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('ids')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('traffics monitor'), middlebox('firewall')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('unit firewall'), middlebox('network border system') start hour('14:10') end hour('15:00')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') add middlebox('network border system'), middlebox('overuse notification') start hour('02:10') end hour('10:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '60', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') unset quota('any', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.67') unset bandwidth('min', '20', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('bookman') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '50', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') block service('email') protocol('http') start hour('15:20') end hour('16:40')",
            "sentence": "define intent stnIntent: for group('students') block service('MSN video') protocol('POP3') start hour('03:00') end hour('11:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '80', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set bandwidth('max', '90', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('scholar') remove middlebox('copyright monitoring'), middlebox('network border system'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall'), middlebox('parental control')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '50', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') block service('popcorn time') start hour('14:30') end hour('16:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.81') block service('popcorn time'), service('AIM chat') start hour('04:40') end hour('11:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set bandwidth('min', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') set bandwidth('max', '60', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('unit firewall') start hour('14:40') end hour('15:10')",
            "sentence": "define intent stnIntent: for group('guests') remove middlebox('dpi'), middlebox('ids') start hour('04:20') end hour('12:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('parental control'), middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('parental control')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.88') allow traffic('streaming') protocol('telnet')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') block service('instagram') protocol('secure POP')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('download', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('any', '3', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('guests') allow traffic('streaming') protocol('nat')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') set bandwidth('min', '40', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('copyright monitoring'), middlebox('firewall'), middlebox('ids')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') add middlebox('ids')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('unit firewall'), middlebox('load balancer') start hour('15:30') end hour('17:00')",
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('copyright monitoring') start hour('06:20') end hour('09:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('streaming') protocol('IMAP')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') allow traffic('voip'), traffic('email') start hour('08:30') end hour('14:40')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.93') allow traffic('H323 video conferencing') protocol('ssh')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') allow service('email') traffic('video conference')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('any', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '5', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') add middlebox('traffics monitor') start hour('15:30') end hour('17:40')",
            "sentence": "define intent stnIntent: for group('guests') remove middlebox('firewall'), middlebox('ids') start hour('04:00') end hour('13:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('non registered users') remove middlebox('parental control'), middlebox('traffics monitor'), middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('firewall')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('any', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set quota('any', '3', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set bandwidth('max', '80', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') set bandwidth('max', '90', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('copyright monitoring'), middlebox('traffics monitor') start hour('15:10') end hour('17:00')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('traffics monitor') start hour('06:10') end hour('10:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') set quota('download', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('any', '7', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('traffics monitor'), middlebox('ids')",
            "sentence": "define intent stnIntent: for group('students') remove middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('student') set quota('download', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('download', '1', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('non registered users') allow protocol('quic'), protocol('dns')",
            "sentence": "define intent stnIntent: for group('guests') allow service('Net2Phone'), service('AIM chat')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.61') block traffic('email'), traffic('H323 video conferencing')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') allow service('email') traffic('streaming')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('student residence') add middlebox('unit firewall')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('traffics monitor')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dormitory') set quota('download', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('download', '1', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('visitors') add middlebox('ids'), middlebox('parental control')",
            "sentence": "define intent stnIntent: for group('guests') remove middlebox('ips'), middlebox('network border system'), middlebox('unit firewall')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set quota('upload', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') set quota('upload', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') allow service('AIM chat') protocol('http')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') allow service('email') protocol('dns')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block service('MSN video') protocol('sftp')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('MSN video'), service('netflix')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('email') protocol('telnet') start hour('15:00') end hour('18:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') allow traffic('streaming') protocol('telnet') start hour('05:40') end hour('13:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('upload', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '5', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') unset quota('any', '7', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set bandwidth('max', '40', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set bandwidth('max', '70', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('unit firewall'), middlebox('ips') start hour('15:10') end hour('17:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') remove middlebox('overuse notification'), middlebox('ips') start hour('06:20') end hour('09:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '70', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('scholarly person') allow traffic('voip') protocol('ftp')",
            "sentence": "define intent stnIntent: for group('students') allow service('email') protocol('tcp')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') block traffic('email') protocol('secure POP')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') allow traffic('email'), traffic('voip')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') add middlebox('load balancer'), middlebox('ids'), middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load balancer')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block protocol('secure IMAP'), protocol('secure POP')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('CounterStrike') protocol('secure POP') start hour('12:10') end hour('19:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') allow protocol('smtp'), protocol('icmp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') allow service('MSN video') protocol('nat') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '90', 'mbps') start hour('08:20') end hour('14:40')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '50', 'mbps') start hour('10:00') end hour('19:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.68') remove middlebox('parental control'), middlebox('dpi')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') add middlebox('ips'), middlebox('load balancer'), middlebox('overuse notification')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '90', 'mbps') start hour('08:00') end hour('19:00')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('ips'), middlebox('network border system'), middlebox('dpi')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.5') add middlebox('load balancer'), middlebox('ids')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('non registered users') remove middlebox('unit firewall'), middlebox('traffics monitor'), middlebox('ips')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('traffics monitor'), middlebox('copyright monitoring')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') set bandwidth('max', '30', 'mbps') start hour('14:10') end hour('18:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') set bandwidth('max', '90', 'mbps') start hour('04:00') end hour('12:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block traffic('video conference') protocol('https')",
            "sentence": "define intent stnIntent: for group('guests') allow service('Sorenson Videophone 200') traffic('gaming')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') block traffic('voip') protocol('http') start hour('14:20') end hour('17:40')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('MSN audio') traffic('voip') start hour('04:10') end hour('12:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('hall') block traffic('file sharing') protocol('POP3')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('MSN chat') protocol('ssh')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') add middlebox('copyright monitoring'), middlebox('network border system')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('download', '3', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('download', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.80') set quota('download', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') unset quota('download', '5', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set bandwidth('max', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('download', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('download', '1', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.65') set bandwidth('max', '80', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set bandwidth('max', '10', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') set bandwidth('min', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('download', '4', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set quota('download', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('any', '1', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') allow service('Battlenet') traffic('voip')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set quota('any', '7', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') block traffic('any') protocol('http')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') allow traffic('peer2peer'), traffic('H323 video conferencing') start hour('10:10') end hour('19:40')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') remove middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('traffics monitor'), middlebox('copyright monitoring')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('gaming') protocol('tcp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') allow service('Sorenson Videophone 200') traffic('video conference') start hour('08:00') end hour('14:40')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('unit firewall'), middlebox('traffics monitor')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block protocol('https'), protocol('udp') start hour('11:40') end hour('17:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') allow service('MSN application sharing') start hour('11:30') end hour('19:40')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set bandwidth('min', '70', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set bandwidth('min', '60', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('dpi'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') add middlebox('parental control'), middlebox('ips'), middlebox('ids')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('network border system'), middlebox('firewall') start hour('16:00') end hour('17:00')",
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('load balancer') start hour('03:00') end hour('13:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block traffic('H323 video conferencing') protocol('ftp')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('file transfer') traffic('streaming')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('upload', '5', 'gb/wk') start hour('17:40') end hour('18:30')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('any', '5', 'gb/wk') start hour('02:10') end hour('14:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '40', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('hall') set quota('upload', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '40', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set bandwidth('min', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.96') set bandwidth('max', '70', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('download', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('download', '4', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block service('netflix') protocol('quic')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('vimeo') protocol('quic')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('any', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('any', '7', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.68') block traffic('social media') protocol('snmp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') allow traffic('file sharing'), traffic('social media')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.76') add middlebox('ids')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') add middlebox('traffics monitor')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set bandwidth('max', '70', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.38') block protocol('http')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') block service('MSN audio') protocol('quic')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('torrent') protocol('quic') start hour('10:20') end hour('19:40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') allow traffic('any') protocol('http') start hour('12:40') end hour('18:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') allow traffic('social media') protocol('dns') start hour('14:20') end hour('18:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') allow traffic('video conference') protocol('quic') start hour('05:30') end hour('10:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.77') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set bandwidth('min', '80', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.80') allow traffic('any') protocol('secure IMAP')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') allow service('netflix') protocol('secure IMAP')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block service('netflix') protocol('tcp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') allow service('email'), service('netflix')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guest networks') remove middlebox('dpi'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: for group('guests') remove middlebox('dpi')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('parental control'), middlebox('ips')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental control'), middlebox('ids'), middlebox('network border system')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') allow traffic('streaming') protocol('https') start hour('14:20') end hour('18:20')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('Battlenet') traffic('email') start hour('04:40') end hour('13:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '20', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '40', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('unit firewall'), middlebox('overuse notification'), middlebox('parental control') start hour('16:10') end hour('17:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('ips'), middlebox('dpi'), middlebox('firewall') start hour('06:10') end hour('13:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '80', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('min', '80', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '60', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '7', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest networks') block service('PC Telephone') traffic('torrent')",
            "sentence": "define intent stnIntent: for group('guests') allow service('listserver') traffic('H323 video conferencing')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') remove middlebox('unit firewall'), middlebox('ids')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('traffics monitor'), middlebox('dpi')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.84') set quota('any', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set quota('upload', '1', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('student residence') add middlebox('unit firewall')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('network border system')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block traffic('file sharing'), traffic('any')",
            "sentence": "define intent stnIntent: for group('guests') allow traffic('streaming'), traffic('any')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') set quota('any', '4', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental control'), middlebox('firewall') start hour('09:20') end hour('17:40')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('copyright monitoring'), middlebox('firewall') start hour('11:00') end hour('17:40')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') allow service('Battlenet') traffic('peer2peer')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') add middlebox('parental control'), middlebox('network border system'), middlebox('ids')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.55')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') allow traffic('video conference') protocol('https') start hour('15:30') end hour('18:00')",
            "sentence": "define intent stnIntent: for group('students') allow service('popcorn time') protocol('telnet') start hour('03:40') end hour('11:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block traffic('gaming'), traffic('any')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('vimeo') traffic('gaming') start hour('12:20') end hour('16:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') block traffic('email') protocol('dns') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') allow traffic('gaming'), traffic('file sharing') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.65') set bandwidth('min', '40', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('copyright monitoring'), middlebox('network border system')",
            "sentence": "define intent stnIntent: for group('guests') remove middlebox('ids'), middlebox('traffics monitor'), middlebox('copyright monitoring')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.76') set quota('upload', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set quota('upload', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('social media') protocol('quic') add middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('students') block traffic('H323 video conferencing'), traffic('social media')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block traffic('H323 video conferencing')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') allow service('MSN audio'), service('amazon prime video')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('guests') allow traffic('voip') protocol('tcp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('traffics monitor')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block traffic('gaming') protocol('scp')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('Sony Playstation 2') traffic('torrent')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') block traffic('email'), traffic('video conference') start hour('16:30') end hour('17:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') allow service('Sorenson Videophone 200'), service('popcorn time') start hour('03:00') end hour('14:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('non registered users') set quota('download', '4', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '1', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('students') allow service('MSN video') protocol('dns')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('ips'), middlebox('firewall')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('any', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('upload', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('download', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '50', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') block protocol('https')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') allow service('PC Telephone') traffic('voip')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') block service('Battlenet') traffic('email') start hour('16:40') end hour('17:20')",
            "sentence": "define intent stnIntent: for group('students') allow service('CounterStrike'), service('listserver') start hour('04:10') end hour('12:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ips'), middlebox('traffics monitor'), middlebox('unit firewall') start hour('09:10') end hour('14:20')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('unit firewall') start hour('08:10') end hour('16:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('residence hall') set quota('download', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '90', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('traffics monitor'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('unit firewall')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set quota('upload', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('upload', '1', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('download', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') allow traffic('peer2peer'), traffic('H323 video conferencing')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('min', '20', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') remove middlebox('dpi'), middlebox('network border system')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.59') add middlebox('load balancer'), middlebox('dpi')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('unit firewall')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('network border system'), middlebox('load balancer')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.79')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set bandwidth('min', '60', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('download', '4', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('copyright monitoring'), middlebox('network border system'), middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('load balancer'), middlebox('overuse notification'), middlebox('network border system')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('traffics monitor'), middlebox('copyright monitoring'), middlebox('ids')",
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('network border system'), middlebox('load balancer')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('any', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('upload', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('bookman') add middlebox('load balancer'), middlebox('ips'), middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental control'), middlebox('traffics monitor'), middlebox('ids')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.60') block protocol('tcp'), protocol('smtp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') allow service('NETBIOS') protocol('ftp')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorm') set bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '10', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('non registered users') block service('instagram') protocol('tcp')",
            "sentence": "define intent stnIntent: for group('guests') allow service('MSN audio'), service('AIM chat')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dormitory') block traffic('file sharing') protocol('nat')",
            "sentence": "define intent stnIntent: for group('dorms') allow traffic('voip'), traffic('H323 video conferencing')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest') set quota('any', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '4', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') unset bandwidth('min', '10', 'mbps') start hour('16:20') end hour('17:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') unset bandwidth('max', '60', 'mbps') start hour('03:20') end hour('10:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('visitors') block service('listserver') protocol('POP3')",
            "sentence": "define intent stnIntent: for group('guests') allow service('Everquest') traffic('email')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('upload', '3', 'gb/wk') start hour('16:20') end hour('17:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set quota('upload', '4', 'gb/wk') start hour('04:10') end hour('13:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') set bandwidth('max', '90', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('dorms') allow traffic('peer2peer') protocol('tcp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('load balancer'), middlebox('ids')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('student') set bandwidth('max', '60', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '10', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') unset quota('any', '6', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.71') set bandwidth('min', '60', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set bandwidth('min', '90', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('upload', '9', 'gb/wk') start hour('14:30') end hour('15:40')",
            "sentence": "define intent stnIntent: for group('students') set quota('any', '8', 'gb/wk') start hour('03:40') end hour('10:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('non registered users') block traffic('voip') protocol('ftp')",
            "sentence": "define intent stnIntent: for group('guests') allow service('irc'), service('MSN video')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') add middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('guests') remove middlebox('dpi'), middlebox('ips'), middlebox('ids')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block service('Sorenson Videophone 200') protocol('smtp') start hour('08:40') end hour('17:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') allow service('Sorenson Videophone 200') traffic('peer2peer') start hour('12:20') end hour('16:00')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ips'), middlebox('parental control')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('load balancer')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.87') set quota('any', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') set quota('any', '3', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load balancer'), middlebox('copyright monitoring'), middlebox('parental control') start hour('15:20') end hour('18:10')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load balancer'), middlebox('overuse notification') start hour('03:10') end hour('13:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('download', '4', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('download', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('hall') set bandwidth('max', '60', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('download', '7', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '20', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorm') set quota('upload', '4', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '7', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('upload', '3', 'gb/wk') start hour('12:00') end hour('15:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('any', '1', 'gb/wk') start hour('11:30') end hour('19:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('scholarly person') add middlebox('overuse notification'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental control')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('upload', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') allow traffic('social media')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') block traffic('file sharing'), traffic('video conference') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('scholarly person') remove middlebox('load balancer'), middlebox('parental control'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental control'), middlebox('traffics monitor'), middlebox('network border system')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.67') remove middlebox('ips')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') remove middlebox('ips'), middlebox('dpi'), middlebox('network border system')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('dpi'), middlebox('unit firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') allow traffic('streaming') protocol('scp') start hour('14:00') end hour('16:30')",
            "sentence": "define intent stnIntent: for group('guests') block traffic('video conference'), traffic('social media') start hour('05:30') end hour('12:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.48') set bandwidth('max', '90', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('min', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('visitors') add middlebox('parental control'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: for group('guests') remove middlebox('ids'), middlebox('network border system'), middlebox('firewall')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('residence hall') block traffic('streaming'), traffic('voip')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('irc'), service('Net2Phone')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset quota('any', '2', 'gb/wk') start hour('14:20') end hour('15:10')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '80', 'mbps') start hour('05:30') end hour('11:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.68') set quota('download', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set quota('any', '9', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') set quota('download', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') set bandwidth('max', '50', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest') block traffic('torrent') protocol('quic')",
            "sentence": "define intent stnIntent: for group('guests') allow service('facebook') traffic('streaming')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.53') allow traffic('peer2peer') protocol('secure POP')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') allow service('PC Telephone') protocol('POP3')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.73') set quota('upload', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set quota('upload', '3', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.48') set quota('upload', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set quota('download', '9', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('download', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '60', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('bookman') remove middlebox('network border system'), middlebox('parental control'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental control'), middlebox('overuse notification')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('bookman') set quota('any', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('download', '1', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('gaming') protocol('smtp')",
            "sentence": "define intent stnIntent: for group('students') allow traffic('gaming'), traffic('torrent')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') allow service('popcorn time') protocol('POP3')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental control'), middlebox('load balancer'), middlebox('traffics monitor')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block service('PC Telephone') traffic('any')",
            "sentence": "define intent stnIntent: for group('guests') allow service('PC Telephone') traffic('torrent')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('guests') allow service('MSN video') protocol('ftp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('download', '1', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorm') block traffic('gaming') protocol('snmp')",
            "sentence": "define intent stnIntent: for group('dorms') allow traffic('gaming'), traffic('H323 video conferencing')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guest users') set bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '4', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '40', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set bandwidth('max', '30', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('scholar') block protocol('smtp'), protocol('snmp')",
            "sentence": "define intent stnIntent: for group('students') allow service('vimeo')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.83') block traffic('torrent'), traffic('peer2peer')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') allow service('Sorenson Videophone 200') traffic('peer2peer')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('guests') allow service('irc') traffic('any')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('network border system'), middlebox('load balancer'), middlebox('ips')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest') set quota('download', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('download', '4', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('student') block traffic('torrent'), traffic('voip')",
            "sentence": "define intent stnIntent: for group('students') block service('PC Telephone') traffic('social media')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest') set bandwidth('max', '40', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '80', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') block traffic('voip') protocol('ftp') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') block service('facebook') traffic('file sharing')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('educatee') block service('irc') protocol('POP3')",
            "sentence": "define intent stnIntent: for group('students') allow service('bittorrent'), service('email')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.59') set bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') set quota('download', '8', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('min', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('any', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '20', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.91') allow protocol('secure IMAP'), protocol('udp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') allow protocol('udp'), protocol('secure POP')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block service('CounterStrike') traffic('gaming')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') allow service('CounterStrike'), service('listserver')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.85') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.72') set quota('any', '5', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('network border system'), middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('dpi'), middlebox('network border system')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('students') allow traffic('any') protocol('ftp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set bandwidth('min', '50', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.64') block traffic('gaming') protocol('https')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') allow service('CounterStrike') traffic('file sharing')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('network border system')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set quota('any', '2', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.69') remove middlebox('overuse notification'), middlebox('ips'), middlebox('network border system')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') add middlebox('copyright monitoring'), middlebox('network border system'), middlebox('load balancer')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('student residence') set quota('any', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '60', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block traffic('peer2peer') protocol('secure IMAP')",
            "sentence": "define intent stnIntent: for group('dorms') allow traffic('file sharing'), traffic('any')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '70', 'mbps') start hour('17:20') end hour('18:20')",
            "sentence": "define intent stnIntent: for group('students') unset quota('upload', '5', 'gb/wk') start hour('05:40') end hour('09:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('download', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.80') set quota('download', '3', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental control'), middlebox('overuse notification'), middlebox('network border system') start hour('14:30') end hour('18:20')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ips'), middlebox('firewall'), middlebox('overuse notification') start hour('04:10') end hour('12:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '50', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '20', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') add middlebox('traffics monitor'), middlebox('overuse notification'), middlebox('dpi')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('load balancer'), middlebox('traffics monitor'), middlebox('ips')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set quota('any', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set quota('any', '4', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') unset quota('upload', '1', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block protocol('snmp'), protocol('https')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') allow service('stremio') traffic('streaming')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set bandwidth('max', '80', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') unset quota('download', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('overuse notification')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('network border system'), middlebox('overuse notification')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') remove middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') add middlebox('traffics monitor'), middlebox('overuse notification')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('firewall'), middlebox('traffics monitor'), middlebox('overuse notification')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('overuse notification'), middlebox('network border system'), middlebox('traffics monitor')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset quota('any', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') unset quota('upload', '1', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '70', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') set bandwidth('max', '50', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('upload', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') unset bandwidth('min', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.49') block protocol('scp'), protocol('https')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') allow service('MSN application sharing'), service('stremio')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set bandwidth('min', '80', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('upload', '2', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.49') set bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '20', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.60') add middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') add middlebox('load balancer'), middlebox('ips')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') remove middlebox('traffics monitor'), middlebox('network border system')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('overuse notification')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '80', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') add middlebox('load balancer'), middlebox('copyright monitoring'), middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('upload', '7', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') block traffic('video conference') protocol('ssh')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') allow service('instagram') traffic('any')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '40', 'mbps') start hour('17:20') end hour('18:00')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '50', 'mbps') start hour('05:00') end hour('09:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set bandwidth('max', '70', 'mbps') start hour('11:10') end hour('18:00')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') set bandwidth('max', '30', 'mbps') start hour('12:00') end hour('17:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('traffics monitor'), middlebox('unit firewall'), middlebox('network border system')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('parental control'), middlebox('ids')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') block service('PC Telephone') protocol('https')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') allow service('MSN application sharing'), service('facebook')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('students') allow traffic('torrent'), traffic('email')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') add middlebox('unit firewall')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest users') block traffic('gaming') protocol('secure IMAP')",
            "sentence": "define intent stnIntent: for group('guests') allow service('CounterStrike') traffic('H323 video conferencing')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('H323 video conferencing') protocol('https') start hour('14:30') end hour('18:20')",
            "sentence": "define intent stnIntent: for group('students') allow service('MSN video') traffic('streaming') start hour('02:00') end hour('09:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block service('netflix') traffic('file sharing') start hour('08:30') end hour('14:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') allow service('file transfer') start hour('08:10') end hour('14:00')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('visitors') set quota('download', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '60', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('residence hall') block protocol('tcp'), protocol('nat')",
            "sentence": "define intent stnIntent: for group('dorms') allow traffic('voip') protocol('smtp')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') allow traffic('gaming'), traffic('social media')",
            "sentence": "define intent stnIntent: for group('dorms') allow traffic('torrent'), traffic('social media') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '50', 'mbps') start hour('08:20') end hour('17:40')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') set quota('download', '6', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') remove middlebox('load balancer')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') add middlebox('copyright monitoring'), middlebox('load balancer') start hour('09:30') end hour('17:40')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') allow service('Sony Playstation 2'), service('facebook') start hour('14:30') end hour('18:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') block service('AIM chat'), service('youtube') start hour('06:10') end hour('14:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '50', 'mbps') start hour('12:40') end hour('17:20')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('non registered users') block service('Battlenet'), service('file transfer')",
            "sentence": "define intent stnIntent: for group('guests') allow service('MSN application sharing'), service('email')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load balancer'), middlebox('firewall'), middlebox('unit firewall') start hour('09:20') end hour('17:00')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') add middlebox('unit firewall') start hour('12:10') end hour('19:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guest users') set bandwidth('min', '40', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('min', '10', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.71') set quota('any', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') set quota('download', '1', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('copyright monitoring'), middlebox('network border system'), middlebox('dpi') start hour('14:10') end hour('15:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') add middlebox('copyright monitoring') start hour('03:10') end hour('09:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('dorms') allow service('vimeo'), service('youtube')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ips'), middlebox('dpi'), middlebox('unit firewall')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('educatee') remove middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('copyright monitoring'), middlebox('ids'), middlebox('overuse notification')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dormitory') add middlebox('overuse notification')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('network border system'), middlebox('parental control')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('overuse notification'), middlebox('ips'), middlebox('ids')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('traffics monitor'), middlebox('ips')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('students') allow traffic('torrent'), traffic('voip')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('traffics monitor')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest') remove middlebox('unit firewall'), middlebox('parental control')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('unit firewall')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('download', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '70', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('upload', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set quota('upload', '7', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('guests') add middlebox('parental control'), middlebox('load balancer'), middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '3', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('parental control'), middlebox('load balancer'), middlebox('ids')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('load balancer')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('download', '3', 'gb/wk') start hour('15:30') end hour('16:30')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('download', '9', 'gb/wk') start hour('04:20') end hour('09:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('dpi'), middlebox('network border system'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') add middlebox('ips'), middlebox('network border system')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('any', '5', 'gb/wk') start hour('16:30') end hour('18:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') unset quota('any', '2', 'gb/wk') start hour('02:30') end hour('12:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.44') set bandwidth('min', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '10', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') allow service('Battlenet'), service('MSN video')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23') add middlebox('ips')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') block traffic('any') protocol('nat')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') allow traffic('voip') protocol('snmp')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.60') add middlebox('parental control'), middlebox('traffics monitor'), middlebox('dpi')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') add middlebox('copyright monitoring')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('pupil') block traffic('voip') protocol('ssh')",
            "sentence": "define intent stnIntent: for group('students') allow service('Sorenson Videophone 200') protocol('ssh')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('any', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('download', '6', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('ips'), middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ips'), middlebox('copyright monitoring'), middlebox('firewall')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') unset bandwidth('min', '40', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') unset bandwidth('max', '90', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set bandwidth('max', '80', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('min', '80', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') add middlebox('network border system'), middlebox('unit firewall'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '50', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('torrent'), traffic('peer2peer')",
            "sentence": "define intent stnIntent: for group('students') allow service('bittorrent') traffic('peer2peer')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') unset quota('upload', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set bandwidth('max', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') remove middlebox('unit firewall'), middlebox('overuse notification') start hour('10:40') end hour('17:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('unit firewall') start hour('08:40') end hour('14:20')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('upload', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '6', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.72') set quota('any', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set quota('any', '4', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('upload', '3', 'gb/wk') start hour('16:40') end hour('17:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.49') set quota('upload', '6', 'gb/wk') start hour('03:40') end hour('11:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('scholarly person') remove middlebox('unit firewall'), middlebox('ids'), middlebox('ips')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('ips'), middlebox('traffics monitor'), middlebox('copyright monitoring')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') block traffic('any') protocol('udp') start hour('15:10') end hour('16:00')",
            "sentence": "define intent stnIntent: for group('guests') block service('NETBIOS') traffic('social media') start hour('04:20') end hour('10:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.87') set bandwidth('min', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') set bandwidth('max', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') unset quota('upload', '6', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('non registered users') block service('Everquest') protocol('tcp')",
            "sentence": "define intent stnIntent: for group('guests') allow service('popcorn time'), service('AIM chat')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') add middlebox('overuse notification'), middlebox('traffics monitor'), middlebox('dpi')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.31') set quota('download', '1', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '40', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set bandwidth('max', '20', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') block traffic('peer2peer') protocol('icmp') add middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('guests') allow traffic('gaming'), traffic('streaming') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('parental control'), middlebox('traffics monitor') start hour('08:30') end hour('14:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') add middlebox('parental control'), middlebox('dpi'), middlebox('unit firewall') start hour('09:10') end hour('15:20')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('students') allow service('irc') traffic('peer2peer')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('unit firewall'), middlebox('ids'), middlebox('ips')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('load balancer'), middlebox('ips')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.28') add middlebox('ips'), middlebox('copyright monitoring'), middlebox('overuse notification')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('student residence') block traffic('streaming'), traffic('social media')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('CounterStrike') traffic('voip')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('dpi'), middlebox('unit firewall'), middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('overuse notification'), middlebox('dpi') start hour('08:20') end hour('17:40')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('ips'), middlebox('ids'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('overuse notification'), middlebox('parental control')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.89')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('student') set quota('download', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '2', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('parental control'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall'), middlebox('load balancer') start hour('10:30') end hour('15:00')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') unset quota('download', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') unset bandwidth('min', '60', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block protocol('smtp'), protocol('https')",
            "sentence": "define intent stnIntent: for group('dorms') allow traffic('H323 video conferencing') protocol('smtp')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') block traffic('peer2peer') protocol('IMAP') start hour('16:00') end hour('18:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') allow service('stremio') protocol('nat') start hour('03:40') end hour('13:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps') start hour('08:00') end hour('16:20')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '40', 'mbps') start hour('11:10') end hour('16:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') allow traffic('file sharing') protocol('udp') start hour('14:40') end hour('15:40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') allow service('MSN audio'), service('listserver') start hour('02:00') end hour('14:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('residence hall') set bandwidth('max', '80', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '30', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') add middlebox('traffics monitor') start hour('14:40') end hour('15:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') remove middlebox('ids') start hour('03:10') end hour('12:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block protocol('tcp') start hour('09:30') end hour('18:40')",
            "sentence": "define intent stnIntent: for group('students') allow service('popcorn time') traffic('H323 video conferencing') start hour('12:10') end hour('18:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('guests') allow service('Net2Phone') traffic('peer2peer')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('dpi')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('upload', '4', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('any', '7', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.76') allow service('Sorenson Videophone 200') traffic('streaming')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') allow service('email'), service('popcorn time')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block protocol('scp') start hour('08:40') end hour('16:00')",
            "sentence": "define intent stnIntent: for group('students') allow protocol('scp'), protocol('secure POP') start hour('11:00') end hour('16:40')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.48') unset quota('download', '5', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('network border system'), middlebox('firewall'), middlebox('ids')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('ips'), middlebox('ids')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('upload', '2', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') set quota('any', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('upload', '7', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('any', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.87') set bandwidth('min', '30', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '70', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') set bandwidth('max', '50', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') block service('popcorn time') traffic('email') start hour('16:00') end hour('17:00')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') block service('irc') traffic('social media') start hour('06:20') end hour('09:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') block traffic('any') protocol('snmp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.70') allow traffic('any'), traffic('social media')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('student') block traffic('voip') protocol('scp')",
            "sentence": "define intent stnIntent: for group('students') block service('Net2Phone') protocol('IMAP')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('pupil') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '50', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') remove middlebox('load balancer'), middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') add middlebox('parental control')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') remove middlebox('overuse notification'), middlebox('network border system'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') add middlebox('dpi'), middlebox('overuse notification')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('ids'), middlebox('copyright monitoring') start hour('16:20') end hour('18:40')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental control'), middlebox('ids') start hour('06:00') end hour('12:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('any', '4', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('download', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset quota('any', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') unset quota('any', '5', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.40') set bandwidth('max', '60', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '60', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') unset quota('download', '4', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.69') unset bandwidth('min', '10', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') block traffic('video conference') protocol('scp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') allow traffic('peer2peer'), traffic('file sharing')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.67') allow traffic('streaming'), traffic('peer2peer')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') allow service('file transfer') traffic('peer2peer')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('streaming'), traffic('file sharing')",
            "sentence": "define intent stnIntent: for group('students') allow traffic('streaming'), traffic('peer2peer')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('hall') remove middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('load balancer')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('upload', '7', 'gb/wk') start hour('12:00') end hour('18:40')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '3', 'gb/wk') start hour('12:30') end hour('18:00')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('any', '4', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') set quota('download', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('non registered users') set quota('any', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '5', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') unset quota('upload', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set bandwidth('min', '50', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.61') set bandwidth('min', '40', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') set bandwidth('max', '40', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('dorms') allow service('instagram') traffic('streaming')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('overuse notification')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('download', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('download', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') allow service('Sony Playstation 2'), service('PC Telephone')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') add middlebox('copyright monitoring'), middlebox('load balancer')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('download', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('download', '1', 'gb/wk') start hour('11:40') end hour('17:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ips'), middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('overuse notification'), middlebox('unit firewall'), middlebox('parental control')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('any', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') set quota('any', '8', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('upload', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') unset quota('download', '4', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') remove middlebox('ids'), middlebox('load balancer'), middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('load balancer'), middlebox('parental control')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('H323 video conferencing') protocol('dns') start hour('15:10') end hour('17:40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') block traffic('peer2peer'), traffic('any') start hour('06:00') end hour('13:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.9') remove middlebox('network border system'), middlebox('ids')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('ips'), middlebox('ids')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '20', 'mbps') start hour('14:10') end hour('15:30')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '8', 'gb/wk') start hour('02:10') end hour('13:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.70') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set bandwidth('min', '60', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') allow traffic('H323 video conferencing') protocol('http')",
            "sentence": "define intent stnIntent: for group('students') block service('instagram') traffic('file sharing') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block protocol('quic'), protocol('secure POP')",
            "sentence": "define intent stnIntent: for group('guests') allow service('email'), service('NETBIOS')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') allow traffic('streaming'), traffic('video conference') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') block traffic('file sharing'), traffic('social media') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('ids'), middlebox('network border system'), middlebox('parental control')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('ids'), middlebox('unit firewall'), middlebox('overuse notification')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('any', '5', 'gb/wk') start hour('17:40') end hour('18:40')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '2', 'gb/wk') start hour('02:40') end hour('09:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('traffics monitor'), middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load balancer'), middlebox('copyright monitoring')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '60', 'mbps') start hour('16:00') end hour('17:40')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '60', 'mbps') start hour('02:20') end hour('13:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') block traffic('social media') protocol('http')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') allow traffic('peer2peer'), traffic('any')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') set bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('any', '6', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('copyright monitoring'), middlebox('ips'), middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('ips')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '1', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('parental control'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('ids'), middlebox('traffics monitor')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('download', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '10', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.58') set quota('upload', '4', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') set quota('upload', '2', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('any', '7', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') block protocol('http'), protocol('nat')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') allow service('Net2Phone') protocol('http')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('download', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') set bandwidth('max', '80', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') block traffic('any') protocol('http')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') allow traffic('email'), traffic('H323 video conferencing')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set quota('download', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.48') set bandwidth('min', '40', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') set bandwidth('min', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '60', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '40', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') unset quota('download', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('download', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('any', '6', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') allow service('Everquest'), service('MSN video')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') add middlebox('traffics monitor')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '10', 'mbps') start hour('11:10') end hour('18:30')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '40', 'mbps') start hour('11:40') end hour('16:00')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.93') add middlebox('overuse notification')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') remove middlebox('traffics monitor'), middlebox('ids')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '70', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') set bandwidth('min', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') allow traffic('file sharing'), traffic('email')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set bandwidth('min', '10', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest') remove middlebox('dpi'), middlebox('firewall'), middlebox('network border system')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('ids'), middlebox('traffics monitor'), middlebox('dpi')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guest') set bandwidth('min', '50', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '1', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.94') set bandwidth('max', '70', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') set bandwidth('min', '60', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.83') set bandwidth('max', '40', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set quota('any', '4', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') remove middlebox('firewall'), middlebox('overuse notification')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') add middlebox('ips'), middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.67') remove middlebox('unit firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') add middlebox('traffics monitor')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('upload', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '7', 'gb/wk') start hour('10:30') end hour('18:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '40', 'mbps') start hour('15:20') end hour('18:40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') set bandwidth('max', '90', 'mbps') start hour('04:00') end hour('11:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set bandwidth('min', '70', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '50', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') allow traffic('gaming') protocol('secure POP')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') allow service('popcorn time') traffic('file sharing')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('any', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') set quota('download', '1', 'gb/wk') start hour('12:30') end hour('14:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('unit firewall'), middlebox('network border system'), middlebox('ips') start hour('16:20') end hour('18:00')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('ips'), middlebox('copyright monitoring') start hour('06:40') end hour('11:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.46') block traffic('H323 video conferencing') protocol('https') start hour('08:40') end hour('14:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') allow service('MSN audio'), service('MSN chat') start hour('12:10') end hour('16:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') unset bandwidth('max', '60', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') remove middlebox('firewall'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('firewall'), middlebox('load balancer')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') block service('AIM chat') traffic('any') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') allow service('instagram') traffic('file sharing') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('scholarly person') set bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '20', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.16') block protocol('icmp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') allow service('MSN audio'), service('Sorenson Videophone 200')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.38')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('overuse notification')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('traffics monitor'), middlebox('ips')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') block traffic('email') protocol('IMAP')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') allow service('amazon prime video') traffic('any')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset quota('any', '8', 'gb/wk') start hour('14:30') end hour('16:30')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') unset quota('upload', '8', 'gb/wk') start hour('03:20') end hour('09:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('bookman') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '20', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.92') block protocol('scp'), protocol('quic')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') block traffic('streaming'), traffic('social media')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.68') set quota('any', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set quota('upload', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') unset bandwidth('min', '40', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '2', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.11') remove middlebox('ips'), middlebox('parental control'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('parental control')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '10', 'mbps') start hour('15:30') end hour('17:20')",
            "sentence": "define intent stnIntent: for group('students') unset quota('upload', '9', 'gb/wk') start hour('06:30') end hour('12:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '60', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set bandwidth('max', '10', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set quota('download', '3', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '50', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('non registered users') allow protocol('nat'), protocol('udp')",
            "sentence": "define intent stnIntent: for group('guests') allow service('CounterStrike') traffic('file sharing')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block protocol('sftp'), protocol('udp')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('bittorrent') traffic('any')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('guests') allow service('CounterStrike'), service('Net2Phone')",
            "sentence": "define intent stnIntent: for group('students') set quota('any', '9', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '40', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('min', '90', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorm') allow service('MSN application sharing') traffic('peer2peer')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('MSN audio'), service('Battlenet')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('any', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('download', '8', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') allow traffic('H323 video conferencing') protocol('secure POP')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') allow service('MSN video') traffic('voip') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.19') set quota('upload', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('any', '7', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') add middlebox('ids'), middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('network border system'), middlebox('unit firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.82') block traffic('social media') protocol('secure IMAP')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') allow service('vimeo') traffic('social media')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '80', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '4', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '40', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('visitors') block service('netflix') protocol('nat')",
            "sentence": "define intent stnIntent: for group('guests') block service('Battlenet'), service('netflix')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.49') set bandwidth('max', '80', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '50', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest users') set quota('any', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('upload', '6', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set bandwidth('min', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') unset quota('upload', '7', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block protocol('sftp'), protocol('snmp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') allow service('CounterStrike'), service('email')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') unset quota('upload', '6', 'gb/wk') start hour('17:20') end hour('18:40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') unset quota('download', '3', 'gb/wk') start hour('04:00') end hour('14:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('residence hall') remove middlebox('load balancer'), middlebox('firewall'), middlebox('overuse notification')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('overuse notification')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('network border system'), middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('parental control')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.89') block traffic('video conference') protocol('https')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') allow service('AIM chat') protocol('http')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '70', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '8', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('network border system')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('network border system') start hour('12:10') end hour('18:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('scholarly person') remove middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('traffics monitor'), middlebox('overuse notification')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorm') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '10', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('network border system'), middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('traffics monitor'), middlebox('overuse notification')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest networks') remove middlebox('traffics monitor'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('unit firewall')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set quota('any', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('min', '90', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.77') set quota('upload', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set quota('upload', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('upload', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block protocol('tcp'), protocol('ssh')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('stremio') traffic('any')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') block protocol('scp'), protocol('snmp') start hour('16:00') end hour('17:40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') allow service('youtube') traffic('email') start hour('02:20') end hour('11:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.81') block traffic('file sharing') protocol('https')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') allow traffic('torrent'), traffic('video conference')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('any', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set bandwidth('min', '80', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '50', 'mbps') start hour('12:00') end hour('15:40')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('min', '60', 'mbps') start hour('11:00') end hour('17:00')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') allow traffic('torrent') protocol('smtp') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') allow service('MSN video') traffic('voip')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '90', 'mbps') start hour('10:20') end hour('16:30')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('min', '60', 'mbps') start hour('08:00') end hour('19:00')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') unset bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.36') unset bandwidth('min', '90', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('pupil') remove middlebox('firewall'), middlebox('parental control'), middlebox('ids')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('copyright monitoring'), middlebox('firewall'), middlebox('overuse notification')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') allow traffic('torrent'), traffic('any') start hour('15:40') end hour('17:30')",
            "sentence": "define intent stnIntent: for group('guests') block traffic('gaming'), traffic('voip') start hour('05:10') end hour('13:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') set quota('any', '4', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.41') set quota('download', '3', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset quota('download', '4', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '40', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') block traffic('social media') protocol('nat')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') allow service('instagram') traffic('social media')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('educatee') add middlebox('ids'), middlebox('parental control')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('network border system'), middlebox('load balancer')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '70', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '70', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.48') remove middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('firewall'), middlebox('ids')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.33') remove middlebox('traffics monitor'), middlebox('unit firewall'), middlebox('ids')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') add middlebox('load balancer'), middlebox('traffics monitor'), middlebox('firewall')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('scholarly person') block traffic('social media') protocol('icmp')",
            "sentence": "define intent stnIntent: for group('students') block service('vimeo') traffic('email')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.48') remove middlebox('network border system'), middlebox('copyright monitoring'), middlebox('parental control')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') add middlebox('parental control')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') remove middlebox('overuse notification') start hour('15:40') end hour('17:40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') add middlebox('overuse notification'), middlebox('network border system') start hour('02:20') end hour('11:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set bandwidth('min', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set bandwidth('max', '90', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') allow service('bittorrent'), service('Net2Phone')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') add middlebox('dpi'), middlebox('overuse notification')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '50', 'mbps') start hour('12:40') end hour('18:10')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '50', 'mbps') start hour('09:20') end hour('17:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('max', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block traffic('file sharing') protocol('IMAP')",
            "sentence": "define intent stnIntent: for group('dorms') allow traffic('email'), traffic('any')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') unset quota('upload', '3', 'gb/wk') start hour('14:40') end hour('17:30')",
            "sentence": "define intent stnIntent: for group('guests') unset quota('upload', '7', 'gb/wk') start hour('02:00') end hour('11:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('residence hall') set bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '60', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') allow protocol('secure IMAP'), protocol('quic') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') allow service('CounterStrike') traffic('email') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('firewall'), middlebox('dpi'), middlebox('parental control')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('parental control') start hour('09:00') end hour('15:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.71') remove middlebox('firewall'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') add middlebox('ids')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('non registered users') block protocol('smtp'), protocol('sftp')",
            "sentence": "define intent stnIntent: for group('guests') allow traffic('peer2peer'), traffic('any')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set quota('download', '4', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('min', '10', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.81') set bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set bandwidth('max', '70', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('visitors') set bandwidth('min', '20', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set quota('download', '7', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('any', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.72') block protocol('IMAP'), protocol('secure POP')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') block service('MSN application sharing') traffic('file sharing')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '40', 'mbps') start hour('10:20') end hour('16:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('bookman') set quota('download', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '6', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall'), middlebox('ids') start hour('11:10') end hour('18:30')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') add middlebox('firewall'), middlebox('unit firewall'), middlebox('parental control') start hour('09:20') end hour('14:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('download', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') set bandwidth('max', '10', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('residence hall') remove middlebox('ips'), middlebox('unit firewall'), middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('load balancer'), middlebox('unit firewall'), middlebox('ids')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.95') set bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') set quota('download', '6', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ids'), middlebox('ips'), middlebox('overuse notification')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('overuse notification'), middlebox('ips'), middlebox('ids')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') set quota('download', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('download', '3', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.73') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set bandwidth('min', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guest networks') block protocol('sftp'), protocol('IMAP')",
            "sentence": "define intent stnIntent: for group('guests') block service('CounterStrike') protocol('smtp')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load balancer'), middlebox('unit firewall') start hour('10:00') end hour('19:00')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') add middlebox('unit firewall'), middlebox('overuse notification'), middlebox('copyright monitoring') start hour('09:10') end hour('15:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('scholarly person') block traffic('peer2peer'), traffic('file sharing')",
            "sentence": "define intent stnIntent: for group('students') block traffic('H323 video conferencing'), traffic('social media')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('load balancer'), middlebox('ids')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('ids'), middlebox('parental control')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') allow protocol('smtp'), protocol('dns') add middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('dorms') block service('Sony Playstation 2') protocol('POP3') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block protocol('tcp'), protocol('IMAP')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('stremio') traffic('H323 video conferencing')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') block service('MSN audio') protocol('ftp') add middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('students') allow service('MSN application sharing') traffic('peer2peer') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.38') unset quota('any', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') unset bandwidth('min', '90', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.79') remove middlebox('parental control'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') add middlebox('firewall'), middlebox('parental control'), middlebox('overuse notification')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.67') allow service('instagram') traffic('any')",
            "sentence": "define intent stnIntent: for group('guests') set quota('download', '9', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') set bandwidth('min', '80', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('student') add middlebox('copyright monitoring'), middlebox('ids'), middlebox('network border system')",
            "sentence": "define intent stnIntent: for group('students') remove middlebox('dpi'), middlebox('ips')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') remove middlebox('firewall'), middlebox('network border system'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') add middlebox('network border system')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') set bandwidth('max', '60', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') unset quota('download', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') block protocol('https'), protocol('quic')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') allow traffic('peer2peer'), traffic('any')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') allow service('popcorn time') traffic('any')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') add middlebox('traffics monitor')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.85') set quota('download', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set quota('any', '1', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') set quota('any', '8', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.22') set bandwidth('max', '60', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set bandwidth('max', '20', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set bandwidth('min', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.80') set bandwidth('min', '30', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.13') set bandwidth('max', '60', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') unset quota('upload', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '70', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('pupil') block traffic('voip'), traffic('social media')",
            "sentence": "define intent stnIntent: for group('students') allow service('MSN chat') traffic('video conference')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.83') add middlebox('dpi'), middlebox('ips')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') add middlebox('copyright monitoring'), middlebox('network border system')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.85') remove middlebox('parental control'), middlebox('overuse notification'), middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') add middlebox('parental control')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('copyright monitoring'), middlebox('ids'), middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('students') remove middlebox('network border system')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '90', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('min', '10', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') add middlebox('copyright monitoring'), middlebox('parental control'), middlebox('ips')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') set bandwidth('max', '80', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('hall') allow traffic('peer2peer')",
            "sentence": "define intent stnIntent: for group('dorms') block service('PC Telephone') traffic('voip')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('student') set quota('download', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('any', '8', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.14') unset bandwidth('min', '10', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.34') set bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set bandwidth('max', '60', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '20', 'mbps') start hour('15:20') end hour('18:20')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '10', 'mbps') start hour('05:40') end hour('09:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '60', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '70', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') allow service('email') traffic('any')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set bandwidth('min', '20', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('load balancer')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('unit firewall'), middlebox('load balancer'), middlebox('parental control')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.85') unset quota('any', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.68') set bandwidth('min', '90', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') set quota('download', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') set quota('any', '6', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') unset quota('any', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('copyright monitoring'), middlebox('traffics monitor'), middlebox('ids')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('traffics monitor')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') unset bandwidth('max', '40', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.49') unset quota('download', '3', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('student residence') remove middlebox('traffics monitor'), middlebox('network border system')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('network border system')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('min', '50', 'mbps') start hour('15:00') end hour('17:40')",
            "sentence": "define intent stnIntent: for group('students') unset quota('upload', '9', 'gb/wk') start hour('03:30') end hour('10:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block service('youtube') traffic('file sharing')",
            "sentence": "define intent stnIntent: for group('students') allow service('CounterStrike') traffic('file sharing')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set quota('download', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set bandwidth('min', '50', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('any', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '1', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('any', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '7', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest') set quota('upload', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('any', '8', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') block service('bittorrent') add middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('students') allow service('irc'), service('listserver') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('student') remove middlebox('parental control'), middlebox('dpi'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('load balancer'), middlebox('parental control'), middlebox('copyright monitoring')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') unset bandwidth('max', '40', 'mbps') start hour('14:10') end hour('17:40')",
            "sentence": "define intent stnIntent: for group('guests') unset quota('upload', '6', 'gb/wk') start hour('03:30') end hour('09:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set bandwidth('min', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') set bandwidth('max', '10', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('dpi'), middlebox('ids') start hour('14:00') end hour('18:40')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('traffics monitor'), middlebox('dpi'), middlebox('overuse notification') start hour('05:30') end hour('13:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '80', 'mbps') start hour('09:40') end hour('15:30')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '20', 'mbps') start hour('12:20') end hour('14:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('network border system'), middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') set quota('download', '4', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('firewall'), middlebox('network border system'), middlebox('dpi')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('ips'), middlebox('load balancer')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') block service('Sony Playstation 2') traffic('streaming')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('file transfer') traffic('voip') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.21') set quota('upload', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('upload', '4', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') remove middlebox('network border system'), middlebox('dpi'), middlebox('parental control') start hour('15:40') end hour('16:40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') add middlebox('network border system'), middlebox('overuse notification') start hour('06:40') end hour('12:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('visitors') remove middlebox('ids'), middlebox('overuse notification')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('traffics monitor'), middlebox('ids'), middlebox('load balancer')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.66') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set quota('upload', '8', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('any', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('download', '4', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') remove middlebox('load balancer')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') remove middlebox('ids'), middlebox('ips'), middlebox('dpi')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block service('email') traffic('social media')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') allow service('MSN video') traffic('peer2peer')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') block protocol('smtp'), protocol('https') start hour('14:10') end hour('18:20')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.8') allow service('MSN video') protocol('secure POP') start hour('04:30') end hour('10:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '80', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') set bandwidth('max', '20', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('download', '2', 'gb/wk') start hour('15:30') end hour('16:30')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '30', 'mbps') start hour('06:30') end hour('09:40')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '30', 'mbps') start hour('08:10') end hour('15:40')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('guests') add middlebox('network border system'), middlebox('ids')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('any', '4', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('upload', '4', 'gb/wk') start hour('12:40') end hour('18:20')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '5', 'gb/wk') start hour('10:00') end hour('17:00')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('download', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set bandwidth('min', '50', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.25') block service('amazon prime video') protocol('POP3')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') allow service('CounterStrike'), service('email')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('dpi') start hour('16:40') end hour('17:30')",
            "sentence": "define intent stnIntent: for group('students') remove middlebox('network border system'), middlebox('parental control'), middlebox('overuse notification') start hour('06:10') end hour('09:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.69') set bandwidth('min', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set bandwidth('max', '90', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set quota('download', '1', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('non registered users') block traffic('email') protocol('udp')",
            "sentence": "define intent stnIntent: for group('guests') allow service('youtube') protocol('secure POP')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') block service('vimeo') protocol('ftp') start hour('15:20') end hour('18:10')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') block service('stremio') traffic('voip') start hour('04:40') end hour('11:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.18') remove middlebox('firewall'), middlebox('ips')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') add middlebox('ips')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('ids')",
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('firewall'), middlebox('copyright monitoring'), middlebox('traffics monitor')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set bandwidth('max', '70', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') block protocol('sftp'), protocol('telnet') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') allow service('NETBIOS') traffic('video conference') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest networks') block protocol('tcp'), protocol('dns')",
            "sentence": "define intent stnIntent: for group('guests') allow service('email') traffic('file sharing')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') allow service('bittorrent') protocol('secure IMAP')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') allow service('Sony Playstation 2') protocol('ftp')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('pupil') block service('netflix') protocol('secure IMAP')",
            "sentence": "define intent stnIntent: for group('students') allow service('listserver') traffic('email')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') allow service('MSN video') protocol('snmp')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('unit firewall'), middlebox('dpi')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.59')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.94') set bandwidth('max', '80', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') set quota('upload', '7', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest users') set bandwidth('min', '80', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('min', '80', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') add middlebox('dpi'), middlebox('firewall'), middlebox('traffics monitor')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('ips'), middlebox('unit firewall')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block protocol('tcp'), protocol('ssh')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('MSN video') protocol('secure IMAP')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') allow service('Sony Playstation 2') traffic('torrent')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set quota('upload', '2', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block protocol('sftp'), protocol('https')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('MSN audio') traffic('peer2peer')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') block traffic('peer2peer') protocol('dns')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.47') allow traffic('video conference') protocol('ssh') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '10', 'mbps') start hour('11:10') end hour('19:40')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '10', 'mbps') start hour('09:30') end hour('17:30')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') set quota('download', '1', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('any', '5', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('any', '9', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') block protocol('ftp'), protocol('IMAP') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') block service('Sorenson Videophone 200') traffic('any') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') remove middlebox('dpi'), middlebox('overuse notification')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') add middlebox('traffics monitor'), middlebox('dpi'), middlebox('ids')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') unset quota('upload', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '10', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') block traffic('social media') protocol('nat')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') allow service('listserver') traffic('any')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') allow traffic('H323 video conferencing') protocol('scp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') allow traffic('social media') protocol('ssh')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('non registered users') set bandwidth('min', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '40', 'mbps')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('non registered users') remove middlebox('ips'), middlebox('unit firewall')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('parental control'), middlebox('network border system')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.30') block protocol('smtp'), protocol('udp')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.20') allow service('Net2Phone') traffic('torrent')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset quota('any', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '20', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('firewall')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') add middlebox('traffics monitor'), middlebox('firewall'), middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('min', '80', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '90', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '60', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.29') add middlebox('copyright monitoring')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('load balancer'), middlebox('network border system')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('bookman') block traffic('gaming'), traffic('torrent')",
            "sentence": "define intent stnIntent: for group('students') allow service('Battlenet') traffic('peer2peer')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('traffics monitor'), middlebox('unit firewall'), middlebox('ips')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('copyright monitoring')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block service('netflix') traffic('social media')",
            "sentence": "define intent stnIntent: for group('guests') allow service('MSN application sharing'), service('listserver')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guest users') add middlebox('overuse notification')",
            "sentence": "define intent stnIntent: for group('guests') remove middlebox('ids')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set quota('any', '7', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('upload', '1', 'gb/wk') start hour('12:40') end hour('14:00')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') unset bandwidth('max', '80', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') unset bandwidth('max', '90', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.65') set bandwidth('min', '50', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set bandwidth('max', '90', 'mbps')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15') set quota('upload', '4', 'gb/wk') start hour('15:30') end hour('17:30')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set bandwidth('min', '80', 'mbps') start hour('02:00') end hour('11:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.85') block service('Net2Phone') protocol('ssh')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.75') allow service('Net2Phone') traffic('voip')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorm') remove middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('dorms') remove middlebox('ids'), middlebox('unit firewall'), middlebox('network border system')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('gaming'), traffic('torrent')",
            "sentence": "define intent stnIntent: for group('students') allow service('NETBIOS') traffic('torrent')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('dpi'), middlebox('overuse notification')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') remove middlebox('ids')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dormitory') remove middlebox('firewall'), middlebox('load balancer')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('firewall'), middlebox('load balancer')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('ips') start hour('14:00') end hour('17:30')",
            "sentence": "define intent stnIntent: for group('guests') remove middlebox('copyright monitoring') start hour('03:20') end hour('11:10')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set bandwidth('max', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') set bandwidth('max', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') set bandwidth('max', '10', 'mbps') start hour('16:10') end hour('18:10')",
            "sentence": "define intent stnIntent: for group('students') set bandwidth('max', '80', 'mbps') start hour('05:30') end hour('14:00')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guest users') block traffic('any') protocol('telnet')",
            "sentence": "define intent stnIntent: for group('guests') allow traffic('gaming') protocol('telnet')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') add middlebox('network border system')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set quota('download', '3', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('min', '80', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('min', '90', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorm') set quota('download', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('download', '6', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block traffic('email'), traffic('H323 video conferencing')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') allow traffic('email'), traffic('social media')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.29.84') allow traffic('peer2peer') protocol('sftp') start hour('17:40') end hour('18:40')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') allow traffic('video conference') protocol('ssh') start hour('05:30') end hour('14:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.72') set bandwidth('max', '40', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.63') set bandwidth('max', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('student residence') set bandwidth('min', '20', 'mbps')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '8', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('scholarly person') set quota('any', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('any', '1', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('bookman') block traffic('file sharing') protocol('http')",
            "sentence": "define intent stnIntent: for group('students') block service('irc'), service('Sorenson Videophone 200')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('upload', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('any', '7', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('students') allow traffic('streaming'), traffic('any')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('19.16.1.1') add middlebox('load balancer')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.58') set quota('any', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') set quota('any', '1', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('students') allow service('AIM chat') traffic('any')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set bandwidth('min', '80', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.23')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.15')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('visitors') block protocol('ssh')",
            "sentence": "define intent stnIntent: for group('guests') block traffic('email') protocol('ftp')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') set bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set bandwidth('max', '70', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset quota('download', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.7') set bandwidth('max', '60', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set bandwidth('max', '30', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set bandwidth('max', '10', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('residence hall') allow protocol('smtp'), protocol('nat')",
            "sentence": "define intent stnIntent: for group('dorms') block service('MSN application sharing') traffic('peer2peer')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.62') remove middlebox('parental control'), middlebox('copyright monitoring'), middlebox('dpi')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.52') add middlebox('firewall'), middlebox('parental control'), middlebox('overuse notification')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.26') add middlebox('overuse notification')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.45') remove middlebox('unit firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.37')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('network border system') start hour('16:00') end hour('18:10')",
            "sentence": "define intent stnIntent: for group('students') remove middlebox('load balancer') start hour('05:40') end hour('12:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') block service('MSN video') traffic('social media')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('MSN application sharing') traffic('email')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') unset bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.72') unset bandwidth('max', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('traffics monitor') start hour('08:20') end hour('18:30')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('traffics monitor'), middlebox('dpi') start hour('11:20') end hour('19:40')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') remove middlebox('unit firewall') start hour('14:30') end hour('15:20')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('unit firewall'), middlebox('copyright monitoring') start hour('06:40') end hour('13:30')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.32') set quota('download', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set quota('download', '2', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') allow protocol('ftp'), protocol('dns') add middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('students') block traffic('video conference') protocol('snmp') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('upload', '1', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.2') set quota('any', '2', 'gb/wk')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') set quota('any', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.43') set quota('download', '2', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorm') block traffic('streaming'), traffic('peer2peer')",
            "sentence": "define intent stnIntent: for group('dorms') allow service('irc') traffic('peer2peer')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') add middlebox('unit firewall'), middlebox('parental control'), middlebox('ids')",
            "sentence": "define intent stnIntent: for group('students') set quota('any', '1', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('torrent'), traffic('email') start hour('09:40') end hour('17:20')",
            "sentence": "define intent stnIntent: for group('students') allow service('bittorrent') traffic('peer2peer') start hour('12:30') end hour('16:20')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') add middlebox('copyright monitoring'), middlebox('ids') start hour('14:20') end hour('15:30')",
            "sentence": "define intent stnIntent: for group('students') remove middlebox('parental control') start hour('06:40') end hour('09:20')",
            "type": "time"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.49')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('students') allow service('vimeo') traffic('H323 video conferencing')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') set bandwidth('min', '20', 'mbps')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('visitors') set quota('any', '9', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('guests') set quota('download', '1', 'gb/wk')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent stnIntent: for group('guests') allow service('CounterStrike') protocol('tcp')",
            "sentence": "define intent stnIntent: for group('guests') add middlebox('unit firewall'), middlebox('dpi')",
            "type": "path"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('unit firewall'), middlebox('copyright monitoring'), middlebox('ips')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('unit firewall') start hour('12:40') end hour('16:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.35') remove middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.7.27') remove middlebox('parental control'), middlebox('network border system'), middlebox('copyright monitoring')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '70', 'mbps') start hour('10:10') end hour('17:40')",
            "sentence": "define intent stnIntent: for group('dorms') set bandwidth('max', '20', 'mbps') start hour('08:20') end hour('14:00')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') add middlebox('traffics monitor'), middlebox('parental control')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') remove middlebox('network border system')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('any', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('any', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') unset quota('any', '8', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.1.3') set bandwidth('min', '50', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') block traffic('streaming') protocol('http') start hour('12:10') end hour('15:30')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.37.86') allow service('AIM chat') traffic('H323 video conferencing') start hour('11:20') end hour('16:20')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') unset bandwidth('min', '20', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.48') set quota('upload', '3', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.10') block traffic('video conference') protocol('quic')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') allow service('PC Telephone') protocol('snmp')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('residence hall') add middlebox('copyright monitoring'), middlebox('overuse notification'), middlebox('parental control')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('dpi'), middlebox('traffics monitor')",
            "type": "synonym"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block protocol('ssh'), protocol('dns') start hour('08:20') end hour('17:20')",
            "sentence": "define intent stnIntent: for group('guests') allow service('file transfer') protocol('secure IMAP') start hour('11:00') end hour('14:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.51') set quota('upload', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.50') unset bandwidth('max', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') remove middlebox('overuse notification')",
            "sentence": "define intent stnIntent: for group('students') add middlebox('network border system'), middlebox('overuse notification'), middlebox('dpi')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('upload', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') unset bandwidth('max', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('visitors') block traffic('torrent'), traffic('video conference')",
            "sentence": "define intent stnIntent: for group('guests') allow service('Everquest') traffic('torrent')",
            "type": "synonym"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') remove middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.48') add middlebox('copyright monitoring'), middlebox('unit firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('max', '60', 'mbps')",
            "sentence": "define intent stnIntent: for group('guests') set bandwidth('max', '80', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') unset bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: for group('students') unset bandwidth('min', '30', 'mbps')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') remove middlebox('ips'), middlebox('parental control'), middlebox('copyright monitoring') start hour('08:40') end hour('19:40')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('ids'), middlebox('copyright monitoring'), middlebox('unit firewall') start hour('11:40') end hour('16:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') set bandwidth('min', '90', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.16.61') set quota('upload', '7', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block protocol('sftp'), protocol('https')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') allow service('AIM chat') protocol('dns')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') set quota('download', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('dorms') set quota('upload', '5', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('dorms') set bandwidth('max', '10', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.4.17') set bandwidth('min', '90', 'mbps')",
            "type": "negation"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('guests') add middlebox('firewall')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') add middlebox('firewall'), middlebox('ips')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.12') set quota('upload', '3', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('upload', '9', 'gb/wk')",
            "type": "qos"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.6') set bandwidth('min', '70', 'mbps')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.2.4') set quota('any', '5', 'gb/wk')",
            "type": "hierarchical"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('guests') block traffic('file sharing') protocol('ftp') start hour('11:20') end hour('17:00')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.22.74') allow traffic('peer2peer'), traffic('file sharing') start hour('11:20') end hour('19:10')",
            "type": "time"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('students') block service('MSN video') protocol('IMAP') add middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('students') allow service('MSN audio') protocol('nat') add middlebox('firewall')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') set quota('any', '2', 'gb/wk')",
            "sentence": "define intent stnIntent: for group('students') set quota('upload', '1', 'gb/wk')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: for group('dorms') add middlebox('overuse notification'), middlebox('firewall')",
            "sentence": "define intent stnIntent: for group('dorms') add middlebox('parental control'), middlebox('dpi')",
            "type": "negation"
        },
        {
            "amibiguity": 1,
            "hypothesis": "define intent hypIntent: for group('students') block traffic('file sharing') protocol('tcp')",
            "sentence": "define intent stnIntent: for group('students') allow traffic('gaming'), traffic('file sharing')",
            "type": "path"
        },
        {
            "amibiguity": 0,
            "hypothesis": "define intent hypIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.42') set quota('upload', '6', 'gb/wk')",
            "sentence": "define intent stnIntent: from endpoint('19.16.1.1') to endpoint('172.16.11.39') set quota('upload', '3', 'gb/wk')",
            "type": "hierarchical"
        }
    ],
    "summary": {
        "amibiguity": {
            "byType": {
                "hierarchical": 90,
                "negation": 81,
                "path": 80,
                "qos": 89,
                "synonym": 90,
                "time": 70
            },
            "count": 500
        },
        "entailment": {
            "byType": {
                "hierarchical": 70,
                "negation": 100,
                "path": 60,
                "qos": 93,
                "synonym": 85,
                "time": 92
            },
            "count": 500
        }
    }
}
